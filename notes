### Notes

##### make file build obj dir other than src

未测试
```
    $(OBJ_DEBUG): $(OBJDIR_DEBUG)/%.o: %.cpp
        $(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $< -o $@

    $(OBJDIR)/%.o: %.c
        $(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<
```

##### git ignore already commit file

有效方式
```
    git rm --cached FILE_PATH
    update .gitignore
    git commit -m "We really don't want Git to track this anymore!"
```
忽略单一大文件
```
    git update-index --assume-unchanged <PATH>
    git update-index --no-assume-unchanged <PATH>
```
===============================================================================
##### bash string comparison

注意[]空格
```
    if [ "$1" == "list" ];then
        echo "arg1 is equal to list"
    fi
```

===============================================================================
##### makefile template

$@ -- 目标文件
$^ -- 所有的依赖文件
$< -- 第一个依赖文件

```
source_files = $(shell find ../src -type f -iname '*.c' | sed 's/^\.\.\/src\///')
obj_files = $(subst .c,.o,$(source_files))

LDFLAGS =
CFLAGS = -g

vpath %.c ../src/

all: bin

bin: $(obj_files)
    gcc $(LDFLAGS) $^ -o $@

%.o: %.c
    -mkdir -p $(dir $@)
    #(-) in front of the rule tells make to ignore the return value of the mkdir command
    gcc $(CFLAGS) $< -c -o $@

.PHONY: all clean

clean:
    rm -rf $(obj_files) $(dir $(obj_files)) bin
```

===============================================================================
##### makefile VPATH vpath

- VPATH 

    指定依赖文件的搜索路径, 使用空格或者冒号（:）将多个目录分开。
    make 搜索的目录顺序按照“VPATH”定义顺序进行（当前目录永远是第一搜索目录）

- vpath

    1、vpath PATTERN DIRECTORIES 
        为符合模式“PATTERN”的文件指定搜索目录“DIRECTORIES”。类“VPATH” 
    2、vpath PATTERN 
        清除之前为符合模式“PATTERN”文件设置的搜索路径
    3、vpath
        清除所有已被设置的文件搜索路径。

===============================================================================
##### restful api

- API设计理念

    1. 将涉及的实体抽象成资源, 即按id访问资源, 在url上做文章, 以后再也不用为url起名字而苦恼.
    2. 使用HTTP动词对资源进行CRUD(增删改查); get->查, post->增, put->改, delete->删.
    3. URL命名规则, 对于资源无法使用一个单数名词表示的情况, 使用中横线(-)连接.
        * 资源采用名词命名, e.g: 产品 -> product
        * 新增资源, e.g: 新增产品, url -> /product , verb -> POST
        * 修改资源, e.g: 修改产品, url -> /products/{id} , verb -> PUT
        * 资源详情, e.g: 指定产品详情, url -> /products/{id} , verb -> GET
        * 删除资源, e.g: 删除产品, url -> /products/{id} , verb -> DELETE
        * 资源列表, e.g: 产品列表, url -> /products , verb -> GET
        * 资源关联关系, e.g: 收藏产品, url -> /products/{id}/star , verb -> PUT
        * 资源关联关系, e.g: 删除收藏产品, url -> /products/{id}/star , verb -> DELETE

===============================================================================
##### gnupg

- 生产密钥查看上传
```
    gpg --gen-key
    gpg --list-keys
    gpg --keyserver server -send-keys pub_hashid
```

- 撤销密钥
```
    gpg --gen-revoke iamyangchong@gmail.com > old.rev(delete colon)
    gpg --import old.rev
    gpg --keyserver server -send-keys pub_hashid
```

===============================================================================
##### scp with tar

- tar 注意Pp
    * cP : contain absolute name
    * xp : preserve permission
    * --exclude "PATH"(without '/' at the end)

```
    tar czf - data | ssh user@host "tar xf - -C dir"
    ssh user@host "tar czf - data" | tar xvzf - -C dir
```

===========================================================================
##### nohup & setsid

- `&` just bg, when shell exit the 'SIGHUP' will kill it.
- `nohop` runs specificed program with the 'SIGHUP' signal ignored.
  and redirects the output to the file nohup.out
- `setsid` run a program in a new session, PPID 1
- (program &) subshell ignore 'HUP', PPID 1
- disown -h jobspec, just ignore 'HUP'

===========================================================================
##### git push

```
    git push origin local_branch:remote_branch
    git pull origin remote_branch:local_branch
    git push origin :remote_branch    # delete remote_branch
```

===========================================================================
##### ssh portforward

```
C                   S/C                 S
localhost:port <-> SSH hostname <-> remote host:port
if remote==localhost; remote= ssh hostname
```

- SSH连接和应用的连接这两个连接的方向一致，是本地转发。 在本地这台机器上监听一个端口，然后所有访问这个端口的数据都会通过ssh 隧道传输到远端的对应端口上
```
  ssh -L <local port>:<remote host>:<remote port> <SSH hostname>
```

- SSH连接和应用的连接这两个连接的方向不同，是远程转发。 在远端服务器监听一个端口，所有访问远端服务器指定端口都会通过隧道传输到本地的对应端口上
```
  ssh -R <local port>:<remote host>:<remote port> <SSH hostname>
```

- 参数 CfNg
  -C ：压缩数据传输。
  -f ：后台认证用户/密码，通常和-N连用，不用登录到远程主机。
  -N ：不执行脚本或命令，通常与-f连用。
  -g ：在-L/-R/-D参数中，允许远程主机连接到建立的转发的端口，如�不加这个参数，只允许本地主机建立连接

===========================================================================
##### pg tutor

```
  sudo -u postgres createuser --superuser chong
  sudo -u postgres psql && \password chong && \q
  sudo -u postgres createdb -O chong testdb
  psql -U chong -d testdb -h 127.0.0.1 -p 5432 # psql testdb
```


===========================================================================
##### sed

```
  sed -i "s/old/new/g" `ag 'old' -rl dir`
```

===========================================================================
##### django debug

python2.7/site-packages/django/core/handlers/base.py

```
  #============= Code start ========== by chang
  print "---------- HTTP 500 Error Msg ---------- "
  print exc_info
  import traceback
  print traceback.format_exc()
  print "----------------------------------------"
  #============= Code end =========
        
  if settings.DEBUG:
      return debug.technical_500_response(request, *exc_info)
        
```

===========================================================================
##### public ip query (without limit)

http://tbip.alicdn.com/api/queryip

===========================================================================
##### 7z unextract with spec path

`7z x demo.7z -o$PATH`

===========================================================================
##### git add trick

git add -A  stages All
git add .   stages new and modified, without deleted
git add -u  stages deleted and modified, without new
